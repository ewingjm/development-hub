name: $(GITVERSION_FullSemVer)
pool:
  vmImage: 'windows-latest'
pr: none
trigger:
  batch: true
  branches:
    include:
      - master
stages:
  - template: templates/include-build-stage.yml
  - template: templates/include-solution-checker-stage.yml
    parameters:
      serviceConnection: 'Developer Instance'
  - template: templates/include-deploy-stage.yml
    parameters:
      environment: 'test'
      resetServiceConnection: 'Developer Instance (adminuser)'
      deployServiceConnection: 'Developer Instance'
      environmentVariableGroup: 'Environment - Test'
  - template: templates/include-test-stage.yml
    parameters:
      environmentVariableGroup: 'Environment - Test'
  - stage: CreateRelease
    displayName: 'Create release'
    dependsOn:
      - 'Build'
      # - 'Test'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: CreateReleaseJob
        displayName: 'Create release'
        variables: 
          SemVer: $[ stageDependencies.Build.BuildJob.outputs['OutputSemVerTask.SemVer'] ]
        steps:
          - download: current
            displayName: 'Download package artifact'
            artifact: 'Development Hub'
          - task: ArchiveFiles@2
            displayName: 'Zip package artifact'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/Development Hub'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          # - task: GitHubRelease@1
          #   displayName: Create GitHub release
          #   inputs:
          #     gitHubConnection: 'GitHub (ewingjm)'
          #     repositoryName: '$(Build.Repository.Name)'
          #     action: 'create'
          #     target: '$(Build.SourceVersion)'
          #     tagSource: 'userSpecifiedTag'
          #     tag: 'v$(SemVer)'
          #     releaseNotesSource: 'inline'
          #     assets: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          #     isPreRelease: true
          #     changeLogCompareToRelease: 'lastNonDraftRelease'
          #     changeLogType: 'commitBased'